@mixin mediaquery($size){
  $query: map-get($breakpoints, $size);

  @media #{$query}{
    @content;
  }
}

@mixin maxwidth($top: 0, $bottom: $top, $size: $max-width) {
  margin: 0 auto;
  padding: $top 18px $bottom;

  @media (min-width: $size + 40) {
    padding: $top calc((100vw - #{$size}) / 2) $bottom;
  }
}

@mixin flexibleFontSize($size: 10, $min-width: 560px) {
  font-size: round($min-width * ($size / 100));

  @media (min-width: $min-width) {
    font-size: #{$size}vw;
  }

  @include mediaquery("max-width") {
    font-size: round($max-width * ($size / 100));
  }
}

@mixin linear-gradient-b($args...) {
 background: linear-gradient($args);
}

@mixin button($bg, $textColor, $gradient: "false") {
  @if ($gradient == "true") {
    @include linear-gradient-b(45deg, rgba(map-get($color, "brand-secondary"), 1), rgba(map-get($color, "brand-secondary-second"), 1));
  }
  @else {
    background: $bg;
  }
  text-transform: uppercase;
  text-decoration: none;
  color: $textColor;
  font-size: 13px;
  min-width: 155px;
  text-align: center;
  border-radius: 1000px;
  padding: 10px 20px;
  font-weight: 700;
  letter-spacing: 1px;
}

@mixin dotdotdot() {
  overflow:hidden;
  display:inline-block;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin griddify($grid, $gutter) {
  $key: 0;

  @if $grid == 2 {
    $gutter: $gutter / 2;
  }

  flex: 0 0 calc(100% / #{$grid} - #{$gutter});
  margin: 0 $gutter / 2 $gutter * 3;

  @for $i from 1 through $grid {
    $key: $key + 1;

    @if $key == $grid {
      &:nth-child(#{$key}n) {
        margin-right: 0;
        margin-left: $gutter;
      }
    }

    &:nth-child(#{$grid}n+1) {
      margin-left: 0;
      margin-right: $gutter;
    }
  }
}
